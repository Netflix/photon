buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id 'nebula.netflixoss' version '3.1.2'
    id 'java'
    id 'pmd'
    id 'findbugs'
}

group = 'com.netflix.photon'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    /**
     * Following represents the location of SNAPSHOTS of RegXMLLib. It should be enabled only when
     * necessary to verify changes to the library that are not yet committed to Maven Central.
     */
    /*maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }*/
}
findbugs{
    sourceSets = [sourceSets.main]
    ignoreFailures = true
    excludeFilter = file("config/findbugs-excludeFilter-GeneratedCode.xml")
}

pmd {
    ignoreFailures = false
    ruleSets = [] // This overwrites the rules that are being added
    ruleSetFiles = files("${project.rootDir}/config/pmd/ruleset.xml")
}

sourceSets {
    main {
        java {
            srcDir 'generated'
        }
    }
}

javadoc {

    /**
     * Following suppresses creation of javadoc for auto-generated code
     */
    exclude "**/org/smpte_ra/schemas/**"
}

dependencies {
    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1'
    compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    compile group: 'org.slf4j', name: 'slf4j-api', version:'1.7+'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version:'1.7+'
    /**
     * Following includes the RegXMLLib dependency from Maven Central.
     */
    compile group: 'com.sandflow', name: 'regxmllib', version: '1.1.1'
    /**
     * Following should be enabled and the above should be disabled
     * when necessary to verify changes to the RegXMLLib library that are
     * not yet committed to Maven Central.
     */
    /*compile "com.sandflow:regxmllib:${revRegXMLSNAPSHOT}"*/
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9+'
    testCompile group: 'org.testng', name: 'testng', version: '6.+'
}

test {
    useTestNG()
    testLogging {
        events 'started', 'skipped', 'passed', 'failed'
    }
}

/**
 * This task should include all the dependencies as a part of the build process
 */
task getDependencies(type: Copy) {
  from sourceSets.main.runtimeClasspath
  into 'build/libs/'
}

/**
 * Use the following task judiciously, i.e. only
 * when you want to create a gradle wrapper for the
 * latest stable version of gradle.
 */
task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}

//Following line will enable including compile time dependencies as a part of the
//compile and build process.
//assemble.dependsOn getDependencies