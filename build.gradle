plugins {
    id 'java'
    id 'pmd'
    id 'jacoco'
    id 'nebula.release' version '20.1.0'
}

group = 'com.netflix.photon'

javadoc {
    options.encoding = 'UTF-8'
}

configurations {
    jaxb
}

def generated_dir = "generated"
def xsd_dir = "src/main/resources/org"

task generateSources(type:JavaExec) {
    inputs.dir "$xsd_dir"
    outputs.dir "$generated_dir"
    classpath configurations.jaxb
    mainClass = 'com.sun.tools.xjc.XJCFacade'
    args "-d", "$generated_dir", "$xsd_dir"
}

compileJava {
    options.encoding = 'UTF-8'
    dependsOn generateSources
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

repositories {
    mavenCentral()
}

pmd {
    ignoreFailures = false
    ruleSets = [] // This overwrites the rules that are being added
    ruleSetFiles = files("${project.rootDir}/codequality/pmd/ruleset.xml")
}

sourceSets {
    main {
        java {
            srcDir 'generated'
        }
    }
}

javadoc {

    /**
     * Following suppresses creation of javadoc for auto-generated code
     */
    exclude "**/org/smpte_ra/schemas/**"
    exclude "**/org/w3/_2000/_09/xmldsig_/**"
}

dependencies {
    implementation 'com.github.spotbugs:spotbugs-annotations:latest.release'
    implementation "com.sandflow:regxmllib:1.2.+"
    testImplementation "org.mockito:mockito-core:3.3+"
    testImplementation "org.testng:testng:7.5+"
    implementation "org.slf4j:slf4j-simple:latest.release"
    implementation "org.slf4j:slf4j-api:latest.release"

    runtimeOnly 'software.amazon.nio.s3:aws-java-nio-spi-for-s3:latest.release'

    // JAX-B dependencies for JDK 9+
    implementation "org.glassfish.jaxb:jaxb-runtime:4.0.5"
    implementation "jakarta.xml.bind:jakarta.xml.bind-api:4.0.2"
    implementation 'jakarta.annotation:jakarta.annotation-api:3.0.0'

    // Add JAXB XJC tool for code generation
    jaxb 'org.glassfish.jaxb:jaxb-xjc:4.0.5'
}

test {
    useTestNG()
    testLogging {
        events 'started', 'skipped', 'passed', 'failed'
    }
}

/**
 * This task should include all the dependencies as a part of the build process
 */
task getDependencies(type: Copy) {
  from sourceSets.main.runtimeClasspath
  into 'build/libs/'
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = false
    }
}

//Following line will enable including compile time dependencies as a part of the
//compile and build process.
//assemble.dependsOn getDependencies
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}